https://leetcode.com/problems/trapping-rain-water/
https://leetcode.com/problems/trapping-rain-water/discuss/898462/Combine-all-solutions-with-TCSC-O(N)

/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

TC--O(N)
SC--O(N)--two arrays
Two iterations of an array
/^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^/

class Solution {
public:
	int trap(vector<int>& height) {
        int n = height.size();
		int ans = 0;
		if (n == 0) {
			return n;
		}
		vector<int> max_left(n,0), max_right(n,0);

		max_left[0] = height[0];

		for (int i = 1; i < n; i++) {
			max_left[i] = max(max_left[i - 1], height[i]);
		}

		max_right[n - 1] = height[n - 1];

		for (int i = n - 2; i >= 0; i--) {
			max_right[i] = max(max_right[i + 1], height[i]);
		}

		for (int i = 0; i < n - 1; i++) {
			ans += min(max_right[i], max_left[i]) - height[i];
		}

		return ans;
	}
};
TC--O(N)
SC--O(N)--one stack
one iteration of an array
/^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^/

// //stack-based
class Solution {
public:
	int trap(vector<int>& height) {
		int n = height.size();
		if (n < 2)
			return 0;
		int total_water_area = 0;
		stack<int> s;

		for (int i = 0; i < n; i++) {
			while (!s.empty() && height[i] > height[s.top()]) {
				int top_element = s.top();
				s.pop();

				if (s.empty())
					break;

				int distance = i - s.top() - 1;
				int bounded_area = min(height[i], height[s.top()]) - height[top_element];
				total_water_area += distance * bounded_area;
			}
			s.push(i);
		}

		return total_water_area;
	}
};
TC--O(N)
SC--O(1)
Based on two pointer approach + two indiviual sub-pointers
/^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^/

class Solution {
public:
	int trap(vector<int>& height) {
		int n = height.size();
		if (n < 2)
			return 0;

		int max_left=INT_MIN, max_right = INT_MIN;
		int left = 0, right = n - 1;
		int res = 0;

		while (left < right) {
			//left tower is smaller than right
			if (height[left] <= height[right]) {
				if (height[left] >= max_left)
					max_left = height[left];
				else
					res += max_left - height[left];

				left++;
			}
			else {
				if (height[right] >= max_right)
					max_right = height[right];
				else
					res += max_right - height[right];

				right--;
			}
		}
		return res;
	}
};





Please ignore below part
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
question-- -


--brute force
--dynamic programming
--stack
--two - pointer technique
----------------------------------------------------------------------------------------
1--maximm farthest for every indiviual
----prefix
-- -sufix
----------------------------------------------------------------------------------------

Input : height = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]

	                 Output : 6
                 Explanation :
	                 The above elevation map is represented by array [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1].
	                 In this case, 6 units of rain water (blue section) are being trapped.

	                 --------------------------------------------------------------------------------------
	                 max_left[0] = arr[0];
for ()
	max_left[] = max(max_left[i], arr[i]);

max_right----


result += min(max_right[i], max_left[i]) - arr[i];
------------------------------------------------------------------------------------------
//stack-based approach

we dont really need to compute max_left, max_right.... as stack would uhelp us getting better soltuion...
just in one traversal

-- put the very first elemnt onto the stack

-- -check if stack is not empty and if stack(index) <= handpicked
		top_elemnt = s.top();
s.pop(); //  we dont need of short building
if (s.empty())
	break;
distance = current - s.top() - 1;
bounded_area = min(handpicked, arr[s.top()]) - arr[top_elemnt];

ans += distance * bounded_area
       --------------------------------------------------------------------------------------------
       [5, 8, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]

       top_elemnt = 0

                    5
                    stack
