https://leetcode.com/problems/longest-valid-parentheses/
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
class Solution {
public:
	int longestValidParentheses(string s) {
		if (s.empty())
			return 0;
        
		stack<int> st;
		int max_len = 0;
		int  n = s.length();
        st.push(-1);
		for (int i = 0; i < n; i++) {
			if (s[i] == '(') {
				st.push(i);
			}
			else {
				st.pop();
				if (st.empty()) {
					st.push(i);
				}
				else {
					max_len = max(max_len, i - st.top());
				}
			}
		}
		return max_len;
	}
};

/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
class Solution {
public:
	int longestValidParentheses(string s) {
		if (s.empty())
			return 0;

		int max_len = 0;
		int sum = 0;
		int n = s.length();
        int len=0;
		for (int i = 0; i < n; i++) {
			if (s[i] == '(') {
				sum++;
			}
			else {
				sum--;
			}
			if (sum < 0) {
				sum = 0;
				len = 0;
			}
			else {
				len++;
				if (sum == 0)
					max_len = max(max_len, len);
			}
		}
		
		sum = 0;
		len = 0;
		for (int i = n - 1; i >= 0; i--) {
			if (s[i] == ')') {
				sum++;
			}
			else {
				sum--;
			}
			if (sum < 0) {
				sum = 0;
				len = 0;
			}
			else {
				len++;
				if (sum == 0)
					max_len = max(max_len, len);
			}
		}
		return max_len;
	}
};
