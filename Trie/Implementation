#include <iostream>
#include <string>
using namespace std;

// use seperate directories for better understanding

int main() {
	int choice;
	cin >> choice;
	Trie t;

	while (choice != -1) {
		string word;
		bool ans;
		switch (choice) {
		case 1:  // insert
			cin >> word;
			t.insertWord(word);
			break;
		case 2:  // search
			cin >> word;
			cout << (t.search(word) ? "true\n" : "false\n");
			break;
		case 3: //remove
			cin >> word;
			t.remove(word);
			break;
		default:
			return 0;
		}
		cin >> choice;
	}

	return 0;
}

class TrieNode {
public :
	char data;
	TrieNode **children;
	bool isTerminal;

	TrieNode(char data) {
		this -> data = data;
		children = new TrieNode*[26];
		for (int i = 0; i < 26; i++) {
			children[i] = NULL;
		}
		isTerminal = false;
	}
};

class Trie {
	TrieNode *root;

public :

	Trie() {
		root = new TrieNode('\0');
	}

	void insertWord(TrieNode *root, string word) {
		// Base case
		if (word.size() == 0) {
			root -> isTerminal = true;
			return;
		}

		// Small Calculation
		int index = word[0] - 'a';
		TrieNode *child;
		if (root -> children[index] != NULL) {
			child = root -> children[index];
		}
		else {
			child = new TrieNode(word[0]);
			root -> children[index] = child;
		}

		// Recursive call
		insertWord(child, word.substr(1));
	}

	// For user
	void insertWord(string word) {
		insertWord(root, word);
	}

	bool search(TrieNode *root, string word) {

		if (word.size() == 0) {
			return root->isTerminal == true;
		}

		int index = word[0] - 'a';
		if (root->children[index] == NULL) {
			return false;
		}

		return search(root->children[index], word.substr(1));
	}

	bool search(string word) {
		return search(root, word);
	}

	void removeWord(TrieNode *root, string word) {
		if (word.size() == 0) {
			root->isTerminal = false;
			return;
		}


		int index = word[0] - 'a';
		if (root->children[index] == NULL) {
			return;
		}

		removeWord(root->children[index], word.substr(1));

		if (root->children[index]->isTerminal == false) {
			for (int i = 0; i < 26; i++) {
				if (root->children[i] != NULL)
					return;
			}
		}
		delete root->children[index];
		// to update it's parent about it's children = null
		root->children[index] = NULL;
	}

	void removeWord(string word) {
		removeWord(root, word);
	}
};
