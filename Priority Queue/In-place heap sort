#include <bits/stdc++.h>
using namespace std;
void heapify(int *input, int n) {
	int size = n;
	while (size > 1) {
		swap(input[0], input[size - 1]);

		size--;

		int parentIndex = 0;
		int leftChildIndex = 2 * parentIndex + 1;
		int rightChildIndex = 2 * parentIndex + 2;

		while (leftChildIndex < size) {
			int minIndex = parentIndex;

			if (input[leftChildIndex] < input[parentIndex])
				minIndex = leftChildIndex;
			if (rightChildIndex < size && input[rightChildIndex] < input[minIndex])
				minIndex = rightChildIndex;
			if (minIndex == parentIndex)
				break;

			swap(input[parentIndex], input[minIndex]);

			parentIndex = minIndex;
			leftChildIndex = 2 * parentIndex + 1;
			rightChildIndex = leftChildIndex + 1;
		}
	}
}

void buildHeap(int *input, int n) {
	for (int i = 1; i < n; i++) {
		int childIndex = i;
		while (childIndex > 0) {
			int parentIndex = (childIndex - 1) / 2;

			//min-heap
			if (input[parentIndex] > input[childIndex]) {
				swap(input[parentIndex], input[childIndex]);
			}
			else {
				break;
			}

			childIndex = parentIndex;
		}
	}
}

void inplaceHeapSort(int input[], int n) {
	/* Don't write main().
	 * Don't read input, it is passed as function argument.
	 * Change in the given input itself.
	 * Taking input and printing output is handled automatically.
	 */

	buildHeap(input, n);
	heapify(input, n);
}

