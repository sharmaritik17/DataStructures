
#include <vector>

class PriorityQueue {
	vector<int> pq;

public :

	PriorityQueue() {

	}

	bool isEmpty() {
		return pq.size() == 0;
	}

	int getSize() {
		return pq.size();
	}

	int getMin() {
		if (isEmpty()) {
			return 0;
		}
		return pq.front();
	}

	void insert(int data) {
		pq.push_back(data);

		int childIndex = pq.size() - 1;


		while (childIndex > 0) {
			int parentIndex = (childIndex - 1) / 2;

			if (pq[parentIndex] > pq[childIndex]) {
				swap(pq[parentIndex], pq[childIndex]);
			}
			else {
				break;
			}

			childIndex = parentIndex;
		}

	}

	int removeMin() {
		if (isEmpty())
			return INT_MAX;

		int save_return = pq[0];
		pq[0] = pq[pq.size() - 1];
		pq.pop_back();

		int parentIndex = 0;
		int leftChildIndex = 2 * parentIndex + 1;
		int rightChildIndex = 2 * parentIndex + 2;

		while (leftChildIndex < pq.size() - 1) {
			int minIndex = parentIndex;

			if (pq[leftChildIndex] < pq[minIndex]) {
				minIndex = leftChildIndex;
			}
			if (rightChildIndex < pq.size() - 1 && pq[rightChildIndex] < pq[minIndex]) {
				minIndex = rightChildIndex;
			}
			if (minIndex == parentIndex) {
				break;
			}

			swap(pq[minIndex], pq[parentIndex]);

			parentIndex = minIndex;
			leftChildIndex = 2 * parentIndex + 1;
			rightChildIndex = 2 * parentIndex + 2;
		}
		return save_return;
	}
};
